% Automated Simulink Model Builder for Quadrotor 6DOF
% Location: <root>/script/generate_vehicle_slx.m
% This script creates the complete Simulink model in ./vehicle/ directory

function generate_vehicle_slx()
    
    fprintf('Building Simulink model: quadrotor_6dof_lqr.slx...\n');
    
    model_name = 'quadrotor_6dof_lqr';  % Must match existing .slx filename
    
    % Paths relative to script location
    script_dir = fileparts(mfilename('fullpath'));
    root_dir = fileparts(script_dir);  % Go up one level from /script
    vehicle_dir = fullfile(root_dir, 'vehicle');
    model_path = fullfile(vehicle_dir, model_name);
    
    % Create vehicle directory if it doesn't exist
    if ~exist(vehicle_dir, 'dir')
        mkdir(vehicle_dir);
        fprintf('  Created %s\n', vehicle_dir);
    end
    
    % Close and delete if exists
    if bdIsLoaded(model_name)
        close_system(model_name, 0);
    end
    if exist([model_path '.slx'], 'file')
        delete([model_path '.slx']);
        fprintf('  Deleted existing model\n');
    end
    
    % Create new model
    new_system(model_name);
    open_system(model_name);
    
    %% Add Blocks
    fprintf('  Adding blocks...\n');
    
    % Source blocks
    add_block('simulink/Sources/Clock', [model_name '/Clock']);
    
    % Function blocks
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
              [model_name '/Trajectory_Generator']);
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
              [model_name '/LQR_Controller']);
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
              [model_name '/Quadrotor_Dynamics']);
    
    % Integrator
    add_block('simulink/Continuous/Integrator', [model_name '/Integrator']);
    
    % Sink blocks
    add_block('simulink/Sinks/To Workspace', [model_name '/states_out']);
    add_block('simulink/Sinks/To Workspace', [model_name '/controls_out']);
    add_block('simulink/Sinks/To Workspace', [model_name '/traj_ref_out']);
    
    %% Configure Blocks
    fprintf('  Configuring blocks...\n');
    
    % Integrator
    set_param([model_name '/Integrator'], ...
              'InitialCondition', 'zeros(12,1)', ...
              'InitialConditionSource', 'internal');
    
    % Output blocks
    set_param([model_name '/states_out'], ...
              'VariableName', 'states', ...
              'SaveFormat', 'Array');
    set_param([model_name '/controls_out'], ...
              'VariableName', 'controls', ...
              'SaveFormat', 'Array');
    set_param([model_name '/traj_ref_out'], ...
              'VariableName', 'trajectory_ref', ...
              'SaveFormat', 'Array');
    
    %% Position Blocks
    fprintf('  Positioning blocks...\n');
    
    set_param([model_name '/Clock'], 'Position', [30 103 60 127]);
    set_param([model_name '/Trajectory_Generator'], 'Position', [120 85 220 145]);
    set_param([model_name '/LQR_Controller'], 'Position', [340 170 440 250]);
    set_param([model_name '/Quadrotor_Dynamics'], 'Position', [540 190 640 270]);
    set_param([model_name '/Integrator'], 'Position', [720 215 760 245]);
    set_param([model_name '/states_out'], 'Position', [840 215 900 245]);
    set_param([model_name '/controls_out'], 'Position', [480 300 570 330]);
    set_param([model_name '/traj_ref_out'], 'Position', [260 50 360 80]);
    
    %% Add Connections
    fprintf('  Connecting blocks...\n');
    
    add_line(model_name, 'Clock/1', 'Trajectory_Generator/1', 'autorouting', 'on');
    add_line(model_name, 'Trajectory_Generator/1', 'LQR_Controller/2', 'autorouting', 'on');
    add_line(model_name, 'LQR_Controller/1', 'Quadrotor_Dynamics/2', 'autorouting', 'on');
    add_line(model_name, 'Quadrotor_Dynamics/1', 'Integrator/1', 'autorouting', 'on');
    add_line(model_name, 'Integrator/1', 'states_out/1', 'autorouting', 'on');
    add_line(model_name, 'LQR_Controller/1', 'controls_out/1', 'autorouting', 'on');
    add_line(model_name, 'Trajectory_Generator/1', 'traj_ref_out/1', 'autorouting', 'on');
    
    % Feedback connections
    add_line(model_name, 'Integrator/1', 'LQR_Controller/1', 'autorouting', 'on');
    add_line(model_name, 'Integrator/1', 'Quadrotor_Dynamics/1', 'autorouting', 'on');
    
    %% Configure Model Settings
    fprintf('  Configuring solver settings...\n');
    
    set_param(model_name, 'Solver', 'FixedStepAuto');
    set_param(model_name, 'FixedStep', '0.01');
    set_param(model_name, 'StopTime', '15');
    set_param(model_name, 'SaveOutput', 'on');
    set_param(model_name, 'SaveFormat', 'Array');
    
    %% Add Function Code (All access base workspace with coder.extrinsic)
    fprintf('  Adding MATLAB function code...\n');
    
    % Trajectory Generator Function
    traj_code = [...
        'function ref_state = fcn(t)\n' ...
        '    persistent traj\n' ...
        '    if isempty(traj)\n' ...
        '        coder.extrinsic(''evalin'');\n' ...
        '        temp = evalin(''base'', ''trajectory'');\n' ...
        '        traj = temp;\n' ...
        '    end\n' ...
        '    \n' ...
        '    idx = min(max(1, round(t/traj.dt) + 1), length(traj.time));\n' ...
        '    \n' ...
        '    ref_state = zeros(12,1);\n' ...
        '    ref_state(1:3) = traj.pos(idx,:)'';\n' ...
        '    ref_state(4) = traj.phi_d(idx);\n' ...
        '    ref_state(5) = traj.theta_d(idx);\n' ...
        '    ref_state(6) = traj.yaw(idx);\n' ...
        '    ref_state(7:9) = traj.vel(idx,:)'';\n' ...
        '    ref_state(10:11) = [0; 0];\n' ...
        '    ref_state(12) = traj.yaw_rate(idx);\n' ...
        'end\n'];
    
    % LQR Controller Function
    lqr_code = [...
        'function u = fcn(x, x_ref)\n' ...
        '    persistent K u_hover\n' ...
        '    if isempty(K)\n' ...
        '        coder.extrinsic(''evalin'');\n' ...
        '        temp = evalin(''base'', ''params'');\n' ...
        '        K = temp.K;\n' ...
        '        u_hover = temp.u_hover;\n' ...
        '    end\n' ...
        '    \n' ...
        '    e = x - x_ref;\n' ...
        '    u = u_hover - K * e;\n' ...
        '    \n' ...
        '    u(1) = max(0, min(15, u(1)));\n' ...
        '    u(2:4) = max(-1, min(1, u(2:4)));\n' ...
        'end\n'];
    
    % Quadrotor Dynamics Function
    dyn_code = [...
        'function x_dot = fcn(x, u)\n' ...
        '    persistent m g Ixx Iyy Izz\n' ...
        '    if isempty(m)\n' ...
        '        coder.extrinsic(''evalin'');\n' ...
        '        temp = evalin(''base'', ''params'');\n' ...
        '        m = temp.m;\n' ...
        '        g = temp.g;\n' ...
        '        Ixx = temp.Ixx;\n' ...
        '        Iyy = temp.Iyy;\n' ...
        '        Izz = temp.Izz;\n' ...
        '    end\n' ...
        '    \n' ...
        '    phi = x(4); theta = x(5); psi = x(6);\n' ...
        '    v = x(7:9);\n' ...
        '    omega = x(10:12);\n' ...
        '    F = u(1);\n' ...
        '    tau = u(2:4);\n' ...
        '    \n' ...
        '    cp = cos(psi); sp = sin(psi);\n' ...
        '    ct = cos(theta); st = sin(theta);\n' ...
        '    cf = cos(phi); sf = sin(phi);\n' ...
        '    \n' ...
        '    R = [cp*ct, cp*st*sf-sp*cf, cp*st*cf+sp*sf;\n' ...
        '         sp*ct, sp*st*sf+cp*cf, sp*st*cf-cp*sf;\n' ...
        '         -st, ct*sf, ct*cf];\n' ...
        '    \n' ...
        '    W = [1, sf*tan(theta), cf*tan(theta);\n' ...
        '         0, cf, -sf;\n' ...
        '         0, sf/ct, cf/ct];\n' ...
        '    \n' ...
        '    x_dot = zeros(12,1);\n' ...
        '    x_dot(1:3) = v;\n' ...
        '    x_dot(4:6) = W * omega;\n' ...
        '    \n' ...
        '    thrust_inertial = R * [0; 0; F];\n' ...
        '    gravity = [0; 0; -m*g];\n' ...
        '    x_dot(7:9) = (thrust_inertial + gravity) / m;\n' ...
        '    \n' ...
        '    x_dot(10) = (tau(1) - (Izz-Iyy)*omega(2)*omega(3)) / Ixx;\n' ...
        '    x_dot(11) = (tau(2) - (Ixx-Izz)*omega(1)*omega(3)) / Iyy;\n' ...
        '    x_dot(12) = (tau(3) - (Iyy-Ixx)*omega(1)*omega(2)) / Izz;\n' ...
        'end\n'];
    
    % Write function code to blocks
    Simulink.BlockDiagram.modifyTextMATLABFcn(...
        [model_name '/Trajectory_Generator'], traj_code);
    Simulink.BlockDiagram.modifyTextMATLABFcn(...
        [model_name '/LQR_Controller'], lqr_code);
    Simulink.BlockDiagram.modifyTextMATLABFcn(...
        [model_name '/Quadrotor_Dynamics'], dyn_code);
    
    %% Save Model to ./vehicle/ directory
    fprintf('  Saving model...\n');
    save_system(model_name, model_path);
    
    fprintf('\nSUCCESS! Simulink model created:\n');
    fprintf('  Location: %s\n', [model_path '.slx']);
    fprintf('\nAll blocks access data from base workspace using evalin()\n');
    fprintf('  - Main script loads params and trajectory\n');
    fprintf('  - Simulink blocks cache data in persistent variables\n');
    fprintf('\nTo run simulation from root directory:\n');
    fprintf('  >> simulate_quadrotor_001\n\n');
    
end
    
    % Close and delete if exists
    if bdIsLoaded(model_name)
        close_system(model_name, 0);
    end
    if exist([model_path '.slx'], 'file')
        delete([model_path '.slx']);
    end
    
    % Create new model
    new_system(model_name);
    open_system(model_name);
    
    %% Add Blocks
    fprintf('  Adding blocks...\n');
    
    % Source blocks
    add_block('simulink/Sources/Clock', [model_name '/Clock']);
    
    % Function blocks
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
              [model_name '/Trajectory_Generator']);
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
              [model_name '/LQR_Controller']);
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
              [model_name '/Quadrotor_Dynamics']);
    
    % Integrator
    add_block('simulink/Continuous/Integrator', [model_name '/Integrator']);
    
    % Sink blocks
    add_block('simulink/Sinks/To Workspace', [model_name '/states_out']);
    add_block('simulink/Sinks/To Workspace', [model_name '/controls_out']);
    add_block('simulink/Sinks/To Workspace', [model_name '/traj_ref_out']);
    
    %% Configure Blocks
    fprintf('  Configuring blocks...\n');
    
    % Integrator
    set_param([model_name '/Integrator'], ...
              'InitialCondition', 'zeros(12,1)', ...
              'InitialConditionSource', 'internal');
    
    % Output blocks
    set_param([model_name '/states_out'], ...
              'VariableName', 'states', ...
              'SaveFormat', 'Array');
    set_param([model_name '/controls_out'], ...
              'VariableName', 'controls', ...
              'SaveFormat', 'Array');
    set_param([model_name '/traj_ref_out'], ...
              'VariableName', 'trajectory_ref', ...
              'SaveFormat', 'Array');
    
    %% Position Blocks
    fprintf('  Positioning blocks...\n');
    
    set_param([model_name '/Clock'], 'Position', [30 103 60 127]);
    set_param([model_name '/Trajectory_Generator'], 'Position', [120 85 220 145]);
    set_param([model_name '/LQR_Controller'], 'Position', [340 170 440 250]);
    set_param([model_name '/Quadrotor_Dynamics'], 'Position', [540 190 640 270]);
    set_param([model_name '/Integrator'], 'Position', [720 215 760 245]);
    set_param([model_name '/states_out'], 'Position', [840 215 900 245]);
    set_param([model_name '/controls_out'], 'Position', [480 300 570 330]);
    set_param([model_name '/traj_ref_out'], 'Position', [260 50 360 80]);
    
    %% Add Connections
    fprintf('  Connecting blocks...\n');
    
    add_line(model_name, 'Clock/1', 'Trajectory_Generator/1', 'autorouting', 'on');
    add_line(model_name, 'Trajectory_Generator/1', 'LQR_Controller/2', 'autorouting', 'on');
    add_line(model_name, 'LQR_Controller/1', 'Quadrotor_Dynamics/2', 'autorouting', 'on');
    add_line(model_name, 'Quadrotor_Dynamics/1', 'Integrator/1', 'autorouting', 'on');
    add_line(model_name, 'Integrator/1', 'states_out/1', 'autorouting', 'on');
    add_line(model_name, 'LQR_Controller/1', 'controls_out/1', 'autorouting', 'on');
    add_line(model_name, 'Trajectory_Generator/1', 'traj_ref_out/1', 'autorouting', 'on');
    
    % Feedback connections
    add_line(model_name, 'Integrator/1', 'LQR_Controller/1', 'autorouting', 'on');
    add_line(model_name, 'Integrator/1', 'Quadrotor_Dynamics/1', 'autorouting', 'on');
    
    %% Configure Model Settings
    fprintf('  Configuring solver settings...\n');
    
    set_param(model_name, 'Solver', 'FixedStepAuto');
    set_param(model_name, 'FixedStep', '0.01');
    set_param(model_name, 'StopTime', '15');
    set_param(model_name, 'SaveOutput', 'on');
    set_param(model_name, 'SaveFormat', 'Array');
    
    %% Add Function Code (All load from ./vehicle/ directory)
    fprintf('  Adding MATLAB function code...\n');
    
    % Trajectory Generator Function
    traj_code = [...
        'function ref_state = fcn(t)\n' ...
        '    persistent traj\n' ...
        '    if isempty(traj)\n' ...
        '        load(''./vehicle/trajectory.mat'', ''trajectory'');\n' ...
        '        traj = trajectory;\n' ...
        '    end\n' ...
        '    \n' ...
        '    idx = min(max(1, round(t/traj.dt) + 1), length(traj.time));\n' ...
        '    \n' ...
        '    ref_state = zeros(12,1);\n' ...
        '    ref_state(1:3) = traj.pos(idx,:)'';\n' ...
        '    ref_state(4) = traj.phi_d(idx);\n' ...
        '    ref_state(5) = traj.theta_d(idx);\n' ...
        '    ref_state(6) = traj.yaw(idx);\n' ...
        '    ref_state(7:9) = traj.vel(idx,:)'';\n' ...
        '    ref_state(10:11) = [0; 0];\n' ...
        '    ref_state(12) = traj.yaw_rate(idx);\n' ...
        'end\n'];
    
    % LQR Controller Function
    lqr_code = [...
        'function u = fcn(x, x_ref)\n' ...
        '    persistent K u_hover\n' ...
        '    if isempty(K)\n' ...
        '        load(''./vehicle/quadrotor_params.mat'', ''params'');\n' ...
        '        K = params.K;\n' ...
        '        u_hover = params.u_hover;\n' ...
        '    end\n' ...
        '    \n' ...
        '    e = x - x_ref;\n' ...
        '    u = u_hover - K * e;\n' ...
        '    \n' ...
        '    u(1) = max(0, min(15, u(1)));\n' ...
        '    u(2:4) = max(-1, min(1, u(2:4)));\n' ...
        'end\n'];
    
    % Quadrotor Dynamics Function
    dyn_code = [...
        'function x_dot = fcn(x, u)\n' ...
        '    persistent m g Ixx Iyy Izz\n' ...
        '    if isempty(m)\n' ...
        '        load(''./vehicle/quadrotor_params.mat'', ''params'');\n' ...
        '        m = params.m;\n' ...
        '        g = params.g;\n' ...
        '        Ixx = params.Ixx;\n' ...
        '        Iyy = params.Iyy;\n' ...
        '        Izz = params.Izz;\n' ...
        '    end\n' ...
        '    \n' ...
        '    phi = x(4); theta = x(5); psi = x(6);\n' ...
        '    v = x(7:9);\n' ...
        '    omega = x(10:12);\n' ...
        '    F = u(1);\n' ...
        '    tau = u(2:4);\n' ...
        '    \n' ...
        '    cp = cos(psi); sp = sin(psi);\n' ...
        '    ct = cos(theta); st = sin(theta);\n' ...
        '    cf = cos(phi); sf = sin(phi);\n' ...
        '    \n' ...
        '    R = [cp*ct, cp*st*sf-sp*cf, cp*st*cf+sp*sf;\n' ...
        '         sp*ct, sp*st*sf+cp*cf, sp*st*cf-cp*sf;\n' ...
        '         -st, ct*sf, ct*cf];\n' ...
        '    \n' ...
        '    W = [1, sf*tan(theta), cf*tan(theta);\n' ...
        '         0, cf, -sf;\n' ...
        '         0, sf/ct, cf/ct];\n' ...
        '    \n' ...
        '    x_dot = zeros(12,1);\n' ...
        '    x_dot(1:3) = v;\n' ...
        '    x_dot(4:6) = W * omega;\n' ...
        '    \n' ...
        '    thrust_inertial = R * [0; 0; F];\n' ...
        '    gravity = [0; 0; -m*g];\n' ...
        '    x_dot(7:9) = (thrust_inertial + gravity) / m;\n' ...
        '    \n' ...
        '    x_dot(10) = (tau(1) - (Izz-Iyy)*omega(2)*omega(3)) / Ixx;\n' ...
        '    x_dot(11) = (tau(2) - (Ixx-Izz)*omega(1)*omega(3)) / Iyy;\n' ...
        '    x_dot(12) = (tau(3) - (Iyy-Ixx)*omega(1)*omega(2)) / Izz;\n' ...
        'end\n'];
    
    % Write function code to blocks
    Simulink.BlockDiagram.modifyTextMATLABFcn(...
        [model_name '/Trajectory_Generator'], traj_code);
    Simulink.BlockDiagram.modifyTextMATLABFcn(...
        [model_name '/LQR_Controller'], lqr_code);
    Simulink.BlockDiagram.modifyTextMATLABFcn(...
        [model_name '/Quadrotor_Dynamics'], dyn_code);
    
    %% Save Model to ./vehicle/ directory
    fprintf('  Saving model to ./vehicle/...\n');
    save_system(model_name, model_path);
    
    fprintf('\nSUCCESS! Simulink model created: %s\n', model_path);
    fprintf('\nAll blocks load from: ./vehicle/quadrotor_params.mat\n');
    fprintf('                       ./vehicle/trajectory.mat\n\n');
    fprintf('To run simulation:\n');
    fprintf('  >> simulate_quadrotor_001\n\n');
    
end
    
    % Close and delete if exists
    if bdIsLoaded(model_name)
        close_system(model_name, 0);
    end
    if exist([model_name '.slx'], 'file')
        delete([model_name '.slx']);
    end
    
    % Create new model
    new_system(model_name);
    open_system(model_name);
    
    %% Add Blocks
    fprintf('  Adding blocks...\n');
    
    % Source blocks
    add_block('simulink/Sources/Clock', [model_name '/Clock']);
    
    % Function blocks
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
              [model_name '/Trajectory_Generator']);
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
              [model_name '/LQR_Controller']);
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
              [model_name '/Quadrotor_Dynamics']);
    
    % Integrator
    add_block('simulink/Continuous/Integrator', [model_name '/Integrator']);
    
    % Sink blocks
    add_block('simulink/Sinks/To Workspace', [model_name '/states_out']);
    add_block('simulink/Sinks/To Workspace', [model_name '/controls_out']);
    add_block('simulink/Sinks/To Workspace', [model_name '/traj_ref_out']);
    
    %% Configure Blocks
    fprintf('  Configuring blocks...\n');
    
    % Integrator
    set_param([model_name '/Integrator'], ...
              'InitialCondition', 'zeros(12,1)', ...
              'InitialConditionSource', 'internal');
    
    % Output blocks
    set_param([model_name '/states_out'], ...
              'VariableName', 'states', ...
              'SaveFormat', 'Array');
    set_param([model_name '/controls_out'], ...
              'VariableName', 'controls', ...
              'SaveFormat', 'Array');
    set_param([model_name '/traj_ref_out'], ...
              'VariableName', 'trajectory_ref', ...
              'SaveFormat', 'Array');
    
    %% Position Blocks
    fprintf('  Positioning blocks...\n');
    
    set_param([model_name '/Clock'], 'Position', [30 103 60 127]);
    set_param([model_name '/Trajectory_Generator'], 'Position', [120 85 220 145]);
    set_param([model_name '/LQR_Controller'], 'Position', [340 170 440 250]);
    set_param([model_name '/Quadrotor_Dynamics'], 'Position', [540 190 640 270]);
    set_param([model_name '/Integrator'], 'Position', [720 215 760 245]);
    set_param([model_name '/states_out'], 'Position', [840 215 900 245]);
    set_param([model_name '/controls_out'], 'Position', [480 300 570 330]);
    set_param([model_name '/traj_ref_out'], 'Position', [260 50 360 80]);
    
    %% Add Connections
    fprintf('  Connecting blocks...\n');
    
    add_line(model_name, 'Clock/1', 'Trajectory_Generator/1', 'autorouting', 'on');
    add_line(model_name, 'Trajectory_Generator/1', 'LQR_Controller/2', 'autorouting', 'on');
    add_line(model_name, 'LQR_Controller/1', 'Quadrotor_Dynamics/2', 'autorouting', 'on');
    add_line(model_name, 'Quadrotor_Dynamics/1', 'Integrator/1', 'autorouting', 'on');
    add_line(model_name, 'Integrator/1', 'states_out/1', 'autorouting', 'on');
    add_line(model_name, 'LQR_Controller/1', 'controls_out/1', 'autorouting', 'on');
    add_line(model_name, 'Trajectory_Generator/1', 'traj_ref_out/1', 'autorouting', 'on');
    
    % Feedback connections
    add_line(model_name, 'Integrator/1', 'LQR_Controller/1', 'autorouting', 'on');
    add_line(model_name, 'Integrator/1', 'Quadrotor_Dynamics/1', 'autorouting', 'on');
    
    %% Configure Model Settings
    fprintf('  Configuring solver settings...\n');
    
    set_param(model_name, 'Solver', 'FixedStepAuto');
    set_param(model_name, 'FixedStep', '0.01');
    set_param(model_name, 'StopTime', '15');
    set_param(model_name, 'SaveOutput', 'on');
    set_param(model_name, 'SaveFormat', 'Array');
    
    %% Add Function Code
    fprintf('  Adding MATLAB function code...\n');
    
    % Trajectory Generator Function
    traj_code = [...
        'function ref_state = fcn(t)\n' ...
        '    persistent traj\n' ...
        '    if isempty(traj)\n' ...
        '        load(''trajectory.mat'', ''trajectory'');\n' ...
        '        traj = trajectory;\n' ...
        '    end\n' ...
        '    \n' ...
        '    idx = min(max(1, round(t/traj.dt) + 1), length(traj.time));\n' ...
        '    \n' ...
        '    ref_state = zeros(12,1);\n' ...
        '    ref_state(1:3) = traj.pos(idx,:)'';\n' ...
        '    ref_state(4) = traj.phi_d(idx);\n' ...
        '    ref_state(5) = traj.theta_d(idx);\n' ...
        '    ref_state(6) = traj.yaw(idx);\n' ...
        '    ref_state(7:9) = traj.vel(idx,:)'';\n' ...
        '    ref_state(12) = traj.yaw_rate(idx);\n' ...
        'end\n'];
    
    % LQR Controller Function
    lqr_code = [...
        'function u = fcn(x, x_ref)\n' ...
        '    persistent K u_hover\n' ...
        '    if isempty(K)\n' ...
        '        load(''quadrotor_params.mat'', ''params'');\n' ...
        '        K = params.K;\n' ...
        '        u_hover = params.u_hover;\n' ...
        '    end\n' ...
        '    \n' ...
        '    e = x - x_ref;\n' ...
        '    u = u_hover - K * e;\n' ...
        '    \n' ...
        '    u(1) = max(0, min(15, u(1)));\n' ...
        '    u(2:4) = max(-1, min(1, u(2:4)));\n' ...
        'end\n'];
    
    % Quadrotor Dynamics Function
    dyn_code = [...
        'function x_dot = fcn(x, u)\n' ...
        '    persistent m g Ixx Iyy Izz\n' ...
        '    if isempty(m)\n' ...
        '        load(''quadrotor_params.mat'', ''params'');\n' ...
        '        m = params.m;\n' ...
        '        g = params.g;\n' ...
        '        Ixx = params.Ixx;\n' ...
        '        Iyy = params.Iyy;\n' ...
        '        Izz = params.Izz;\n' ...
        '    end\n' ...
        '    \n' ...
        '    phi = x(4); theta = x(5); psi = x(6);\n' ...
        '    v = x(7:9);\n' ...
        '    omega = x(10:12);\n' ...
        '    F = u(1);\n' ...
        '    tau = u(2:4);\n' ...
        '    \n' ...
        '    cp = cos(psi); sp = sin(psi);\n' ...
        '    ct = cos(theta); st = sin(theta);\n' ...
        '    cf = cos(phi); sf = sin(phi);\n' ...
        '    \n' ...
        '    R = [cp*ct, cp*st*sf-sp*cf, cp*st*cf+sp*sf;\n' ...
        '         sp*ct, sp*st*sf+cp*cf, sp*st*cf-cp*sf;\n' ...
        '         -st, ct*sf, ct*cf];\n' ...
        '    \n' ...
        '    W = [1, sf*tan(theta), cf*tan(theta);\n' ...
        '         0, cf, -sf;\n' ...
        '         0, sf/ct, cf/ct];\n' ...
        '    \n' ...
        '    x_dot = zeros(12,1);\n' ...
        '    x_dot(1:3) = v;\n' ...
        '    x_dot(4:6) = W * omega;\n' ...
        '    \n' ...
        '    thrust_inertial = R * [0; 0; F];\n' ...
        '    gravity = [0; 0; -m*g];\n' ...
        '    x_dot(7:9) = (thrust_inertial + gravity) / m;\n' ...
        '    \n' ...
        '    x_dot(10) = (tau(1) - (Izz-Iyy)*omega(2)*omega(3)) / Ixx;\n' ...
        '    x_dot(11) = (tau(2) - (Ixx-Izz)*omega(1)*omega(3)) / Iyy;\n' ...
        '    x_dot(12) = (tau(3) - (Iyy-Ixx)*omega(1)*omega(2)) / Izz;\n' ...
        'end\n'];
    
    % Write function code to blocks
    Simulink.BlockDiagram.modifyTextMATLABFcn(...
        [model_name '/Trajectory_Generator'], traj_code);
    Simulink.BlockDiagram.modifyTextMATLABFcn(...
        [model_name '/LQR_Controller'], lqr_code);
    Simulink.BlockDiagram.modifyTextMATLABFcn(...
        [model_name '/Quadrotor_Dynamics'], dyn_code);
    
    %% Save Model
    fprintf('  Saving model...\n');
    save_system(model_name);
    
    fprintf('SUCCESS! Simulink model created: %s.slx\n', model_name);
    fprintf('\nThe model is ready to simulate. Run:\n');
    fprintf('  >> complete_setup\n');
    fprintf('or:\n');
    fprintf('  >> simulation_main\n\n');
    
end